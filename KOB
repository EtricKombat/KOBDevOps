#!/bin/bash 





#    FUNCTION NAMING CONVENTION


#	Function_PreRequisites
#	Function_VimFix
#	Function_CheckProxy
#	Function_UbuntuUpgrade
#	Function_GitInstall
#	Function_PythonInstall
#	Function_DockerInstall
#	Function_NpmInstall
#	Function_VonBuild
#	Function_KobBuild
#	Function_DflowBuild


Function_VimFix()
{
	cd
	echo "set nocompatible" > /root/.vimrc
}
fun_menu()
{
	echo "************************************************************"
	echo "*The installation that can be performed by you:            *"
	echo "*         Requires (yes/no) input                          *"
	echo "*1)Ubuntu Update & Upgrade                                 *"
	echo "*2)Git                                                     *"
	echo "*3)Python                                                  *"
	echo "*4)Docker                                                  *"
	echo "*5)Docker Compose                                          *"
	echo "*6)VON Network Build                                       *"
	echo "*7)TOB Build                                               *"
	echo "*8)green light Build                                       *"
	echo "*9)Von Network Start-up                                    *"
	echo "*                                                          *"
	echo "************************************************************"

}
Function_UbuntuUpgrade()
{
	echo -e "\n\r***********************************";
	echo "*       Updating your OS?         *";
	echo "***********************************";

        echo "Updating system......";
        apt-get update -y
        apt-get upgrade -y
}	
Function_PreRequisites()
{
	echo "************************************************************"
	echo "*    Pre-Requesites listed below                          * "
	echo "************************************************************"
	echo "*                                                          *"
	echo "*- you are using Ubuntu Bionic 18.04 (LTS)                 *"
	echo "*  To install Docker Engine - Community                    *"
	echo "*- Login as root user                                      *"
	echo "*- Mininum 4GB RAM is required to set this env up          *"
	echo "*- No special character in password                        *"
	echo "************************************************************"

}
fun_PROXY_ENV()
{
 	unset http_proxy
        unset ftp_proxy
        unset https_proxy
        unset socks_proxy
        unset SOCKS_PROXY
        unset FTP_PROXY
        unset HTTPS_PROXY
        unset HTTP_PROXY
	export HTTPS_PROXY=http://${uname}:${pword}@${prox}:${port}/
        export HTTP_PROXY=http://${uname}:${pword}@${prox}:${port}/
        export FTP_PROXY=ftp://${uname}:${pword}@${prox}:${port}/
        export SOCKS_PROXY=socks://${uname}:${pword}@${prox}:${port}/

        export http_proxy=http://${uname}:${pword}@${prox}:${port}/
        export https_proxy=http://${uname}:${pword}@${prox}:${port}/
        export ftp_proxy=ftp://${uname}:${pword}@${prox}:${port}/
        export socks_proxy=socks://${uname}:${pword}@${prox}:${port}/
	env | grep -i proxy
}

Function_CheckProxy()
{
	read -p "Are you behind a corporate proxy?" reply
if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];

then
       	proxychk=1 
	sudo dpkg --configure -a
	read -p "Enter the proxy?[eg: Kochin.dummy.com..etc] :" prox
        echo -e "\n"
	read -p "Enter the port?[eg :8080,443..etc]          :" port
        echo -e "\n"
	read -p "Enter AD ID? [eg :ai318974]                 :" uname
        read -s -p "Enter password?[your login password]        : " pword
        echo -e "\n"
	read -p "Enter email ID?                             :" emil
	fun_PROXY_ENV
        for proto in http https ftp socks;
        do
                if [ "$proto" = "https" ];
                then
                  printf 'Acquire::%s::proxy "http://%s:%s@%s:%u/";\n' "$proto" "$uname" "$pword" "$prox" "$port"
                else
                        printf 'Acquire::%s::proxy "%s://%s:%s@%s:%u/";\n' "$proto" "$proto" "$uname" "$pword" "$prox" "$port"
                fi

        done | sudo tee -a /etc/apt/apt.conf > /dev/null
        mkdir -p /etc/systemd/system/docker.service.d/
 touch /etc/systemd/system/docker.service.d/https-proxy.conf
        echo -e "[Service]\nEnvironment="HTTPS_PROXY=http://${uname}:${pword}@${prox}:${port}"">>/etc/systemd/system/docker.service.d/https-proxy.conf

        echo "**********************"
        git config --global user.name "${uname}"
        git config --global user.email "${emil}"
        apt install ca-certificates -y
        git config --global http.sslVerify false
        git config --global http.proxy http://${uname}:${pword}@${prox}:${port}
else
        echo "skipping the proxy settings"
fi

}
Function_GitInstall()
{
	echo -e "\n\r**********************************";
	echo "*     Installing Git?            *";
	echo "**********************************";

        apt install git -y
        git --version

}
Function_PythonInstall()
{
	echo -e "\n\r**********************************";
	echo "*      Installing Python?        *"
	echo "**********************************"
        apt install software-properties-common -y
        apt install Python3.7 -y
	apt install python-pip -y
	
	
}
Function_DockerInstall()
{
	echo "*  Uninstalling Exising Docker...*";
        echo "**********************************";

        sudo apt-get remove docker docker-engine docker-ce docker-ce-cli docker.io -y

        echo -e "\n\r**********************************";
        echo "*    Installing Docker...         *";
        echo -e "**********************************\n\n\r";
        apt-get update -y
        apt install docker.io -y
        echo -e "\n\r************************************************************************";
        echo "*    Installing packages to allow apt to use a repository over HTTPS...   *";
        echo -e "*************************************************************************\n\n\r";



        apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y

        echo -e "\n\r******************************";
        echo "*    Add Dockers official GPG key... *";
        echo -e "*********************************\n\n\r";
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

        echo -e "\n\r***********************************************************";
        echo "*    Verifying that you now have the key with the fingerprint: *";
        echo -e "*********************************************************\n\n\r";
 	apt-key fingerprint 0EBFCD88


        echo -e "\n\n\r**********************************";
        echo "*     setting up the stable repository...  *";
        echo "**********************************";
        lsb_release -cs
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable"

        echo -e "\n\r**********************************";
        echo "*    Installing Docker Engine...*";
        echo "**********************************";
        apt-get update -y
        apt-get install docker-ce docker-ce-cli containerd.io -y
        docker run hello-world


	echo -e "\n\r***********************************";
	echo "*    Installing Docker Compose?   *";
	echo "***********************************";
        curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

        chmod +x /usr/local/bin/docker-compose
        echo -e "\n\r**********************************";
        echo "*     Docker & Docker compose Version     *";
        echo "**********************************";
        systemctl start docker
        systemctl enable docker
	docker --version
        docker-compose --version
        echo -e "\n\r**********************************";
        echo -e "\n\r*    Docker Login                *"
	echo -e "\n\r**********************************";
	rm -rf /root/.docker/
        docker login
        
	if [[ "$proxychk" -eq 1 ]]
	then 
		sed -i '$ d' /root/.docker/config.json
		echo -e ",\n "\""proxies"\"": {\n\t "\""default"\"": {\n\t\t "\""httpProxy"\"": "\""http://${uname}:${pword}@${prox}:${port}"\"",\n\t\t "\""httpsProxy"\"": "\""https://${uname}:${pword}@${prox}:${port}"\"",\n\t\t "\""noProxy"\"": "\""localhost,127.0.0.0/8,*.local,host.docker.internal"\"" \n\t\t}\n\t}\n}">>/root/.docker/config.json
	fi

}
Function_NpmInstall()
{
	echo -e "\n\r***********************************";
	echo "*    Purging NPM Components              *";
	echo -e "\n\r***********************************";
	npm config rm proxy
	npm config rm proxy --global

	npm config rm https-proxy
	npm config rm https-proxy --global

	npm config rm registry
	npm cache clean

	sudo apt-get remove nodejs nodejs-dev node-gyp libssl1.0-dev npm
	echo "Ignore!! these errors"

	echo -e "\n\r***********************************";
	echo "*    Installing NPM Components              *";
	echo -e "\n\r***********************************";

	sudo apt-get install nodejs nodejs-dev node-gyp libssl1.0-dev npm -y

	npm config set https-proxy http://${uname}:${pword}@${prox}:${port}--global
	npm config set https-proxy http://${uname}:${pword}@${prox}:${port}

	npm config set proxy http://${uname}:${pword}@${prox}:${port}--global
	npm config set proxy http://${uname}:${pword}@${prox}:${port}

	npm config set registry http://registry.npmjs.org
	npm config set strict-ssl false

}
Function_VonBuild()
{
		echo "Build KOB-Von instance in your system" 
                git clone https://github.com/hyperledgerkochi/von-network.git
                /home/KOB/von-network/manage rm
                /home/KOB/von-network/manage build
	
}
Function_VonStart()
{
	/home/KOB/von-network/manage start
}	
Function_KobBuild()
{
		echo "Setting-up KOB instance in your system?" 
                git clone https://github.com/EtricKombat/TheOrgBook.git
                wget --no-proxy https://github.com/openshift/source-to-image/releases/download/v1.1.14/source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                tar -xvzf source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                mv s2i sti /usr/local/bin/
                /home/KOB/TheOrgBook/docker/manage rm
		/home/KOB/TheOrgBook/docker/manage build
		sed -i -e 's/- 3000/- 3100/g' /home/KOB/TheOrgBook/docker/docker-compose.yml


}

Function_KobStart()
{
read -p "Do you want to start KOB instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then
	/home/KOB/TheOrgBook/docker/manage start seed=the_org_book_0000000000000000000
	fi
}
Function_DflowBuild()
{
		echo "Setting-up GreenLight instance in your system"

                git clone https://github.com/EtricKombat/greenlight.git
                wget --no-proxy https://github.com/openshift/source-to-image/releases/download/v1.1.14/source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                tar -xvzf source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                mv s2i sti /usr/local/bin/
                /home/KOB/greenlight/docker/manage rm
	        /home/KOB/greenlight/docker/manage build


		
}

fun_Dflow_start()
{
	read -p "Do you want to setup GreenLight instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then
		/home/KOB/greenlight/docker/manage start 
	fi
}


######################################################################



ONE=$1
TWO=$2
THREE=$3


if [ "$ONE" = "install" ]
then
        case $TWO in
               --dev)
                        if [ "$THREE" = "All" ]
                        then
                                echo "install all the dev environment to do development"
				Function_CheckProxy
		                Function_UbuntuUpgrade
                		Function_GitInstall
		                Function_PythonInstall
		                Function_DockerInstall
               			Function_NpmInstall
		                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
		                mkdir -p /home/KOB
		                cd /home/KOB
				echo "Add sufficient functions to install KOB Project Development liberaries "
                        elif [ $THREE = "KOBVON" ]
                        then
                                echo "to install just the KOBVON project for development"
				Function_CheckProxy
		                Function_UbuntuUpgrade
		                Function_GitInstall
		                Function_PythonInstall
		                Function_DockerInstall
		                Function_NpmInstall
		                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
		                mkdir -p /home/KOB
		                cd /home/KOB
		                Function_VonBuild

                        elif [ $THREE = "KOB" ]
                        then
                                echo "to install the KOB project for development"
				Function_CheckProxy
		                Function_UbuntuUpgrade
		                Function_GitInstall
		                Function_PythonInstall
		                Function_DockerInstall
		                Function_NpmInstall
		                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
		                mkdir -p /home/KOB
		                cd /home/KOB
				echo "Add sufficient functions to install KOB Project Development liberaries "

			
			elif [ $THREE = "KOBDFlow" ]
			then

				echo "Add sufficient functions to install KOBDflow Project Development liberaries "
			elif [ $THREE = "KOBConnect" ]
			then
			
				echo "Add sufficient functions to install KOB Connect  Project Development liberaries "
			elif [ $THREE = "KOBRegistery" ]
			then
				echo "Add sufficient functions to install KOB Registery Project Development liberaries "
			elif [ $THREE = "TOB" ]
                        then
                                echo "to install the KOB project for development"
				Function_CheckProxy
		                Function_UbuntuUpgrade
		                Function_GitInstall
		                Function_PythonInstall
		                Function_DockerInstall
		                Function_NpmInstall
		                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
		                mkdir -p /home/KOB
		                cd /home/KOB

				echo "Add sufficient functions to install TOB Project Development liberaries "
			elif [ $THREE = "TOBVON" ]
			then
				echo " Add sufficient functions to install TOB Project Development liberaries "
			elif [ $THREE = "greenlight" ]
			then
				echo "# Add sufficient functions to install TOB Project Development liberaries "
			else
                                echo "Verify your command and try again"
                        fi
                ;;
                KOBVON)
                        echo "Deploy KOBVON for testing"
			Function_CheckProxy
	                Function_UbuntuUpgrade
	                Function_GitInstall
	                Function_PythonInstall
	                Function_DockerInstall
	                Function_NpmInstall
	                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
	                mkdir -p /home/KOB
	                cd /home/KOB
	                Function_VonBuild
	                Function_VonStart

                ;;
                KOB)
                        echo "Building KOB for testing"
                        Function_CheckProxy
                        Function_UbuntuUpgrade
                        Function_GitInstall
                        Function_PythonInstall
                        Function_DockerInstall
                        Function_NpmInstall
                        apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
                        mkdir -p /home/KOB
                        cd /home/KOB
                     	Function_KobBuild 
			Function_KobStart                        

                ;;
		KOBDflow)
			echo "./KOB install KOBDflow"	
		;;
		KOBConnect)
			echo "./KOB install KOBConnect"	
		;;
		KOBRegistery)
			echo "./KOB install KOBRegistery"	
		;;
		TOBVON)
			echo "./KOB install TOBVON"	
		;;
		TOB)
			echo "./KOB install TOB" 
		;; 
		greenlight)
			echo "./KOB install greenlight"	
		;;	
		
		*)
                        if [ -z $TWO ]
                        then
                                echo "Install default projects i.e KOBVON, KOBDflow,KOBConnect, KOBRegistry, TheKochOrgBook"
				
                		Function_CheckProxy
		                Function_UbuntuUpgrade
                		Function_GitInstall
		                Function_PythonInstall
                		Function_DockerInstall
		                Function_NpmInstall
                		apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev -y
		                mkdir -p /home/KOB
                		cd /home/KOB
                		fun_PROXY_ENV
				Function_UbuntuUpgrade
				Function_VonBuild
                		Function_KobBuild
		                Function_DflowBuild

                        fi
                ;;
        esac

elif [ "$ONE" = "uninstall" ]
then
	echo "Uninstalling KOB Project"
elif [ "$ONE" = "list" ]
then
	echo "Listing down KOB projects"
elif [ "$ONE" = "help" ]
then
	echo "Getting Help for KOB project"
elif [ "$ONE" = "version" ]
then
	echo "Listing Versions"
elif [ "$ONE" = "status" ]
then
	echo "status of the project"
fi


